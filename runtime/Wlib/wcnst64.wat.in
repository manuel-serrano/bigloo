;; -*- eval: (bee-mode) -*-
;*=====================================================================*/
;*    serrano/prgm/project/bigloo/wasm/runtime/Wlib/wcnst64.wat.in     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Oct  2 10:56:25 2024                          */
;*    Last change :  Tue Jul 22 08:07:05 2025 (serrano)                */
;*    Copyright   :  2024-25 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    WASM implementation of constants with 64-bit boxed fixnums.      */
;*    -------------------------------------------------------------    */
;*    When fixnums are boxed, i31ref is used to encode constants.      */
;*=====================================================================*/

(module $__bigloo_cnst
   
   ;; -----------------------------------------------------------------
   ;; Global constantes 
   ;; -----------------------------------------------------------------
   
   (global $BFALSE (export "BFALSE") (ref i31) (ref.i31 (i32.const 0)))
   (global $BTRUE (export "BTRUE") (ref i31) (ref.i31 (i32.const 1)))
   (global $BNIL (export "BNIL") (ref i31) (ref.i31 (i32.const 2)))
   (global $BUNSPEC (export "BUNSPEC") (ref i31) (ref.i31 (i32.const 3)))
   (global $BEOF (export "BEOF") (ref i31) (ref.i31 (i32.const 4)))
   (global $BEOA (export "BEOA") (ref i31) (ref.i31 (i32.const 5)))
   (global $BOPTIONAL (export "BOPTIONAL") (ref i31) (ref.i31 (i32.const 0x102)))
   (global $BKEY (export "BKEY") (ref i31) (ref.i31 (i32.const 0x106)))
   (global $BREST (export "BREST") (ref i31) (ref.i31 (i32.const 0x103)))
   
   ;; -----------------------------------------------------------------
   ;; Library functions 
   ;; -----------------------------------------------------------------
   (global $BCHAR_OFFSET i32 (i32.const 1000))
   
   (global $bchar-default-value
      (export "BGL_BCHAR_DEFAULT_VALUE") (ref i31)
      (ref.i31 (global.get $BCHAR_OFFSET)))
   
   ;; CNSTP
   (func $CNSTP (export "CNSTP")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref i31) (local.get $o)))

   ;; BOOLEANP
   (func $BOOLEANP (export "BOOLEANP")
      (param $o (ref eq))
      (result i32)
      (i32.or
	 (ref.eq (local.get $o) (global.get $BFALSE))
	 (ref.eq (local.get $o) (global.get $BTRUE))))

   ;; BBOOL
   (func $BBOOL (export "BBOOL") (param $v i32) (result (ref i31))
      (if (result (ref i31)) (local.get $v)
	  (then (global.get $BTRUE))
	  (else (global.get $BFALSE))))

   ;; CBOOL
   (func $CBOOL (export "CBOOL") (param $v (ref i31)) (result i32)
      (i31.get_u (local.get $v)))

   ;; OBJ_TO_BOOL
   (func $OBJ_TO_BOOL (export "OBJ_TO_BOOL")
      (param $o (ref eq))
      (result i32)
      (if (result i32) (ref.eq (local.get $o) (global.get $BFALSE))
	  (then (i32.const 0))
	  (else (i32.const 1))))
   
   ;; CHARP
   (func $CHARP (export "CHARP")
      (param $o (ref eq))
      (result i32)
      (return
	 (if (result i32) (ref.test (ref i31) (local.get $o))
	     (then
		(if (result i32)
		    (i32.ge_u (i31.get_u (ref.cast (ref i31) (local.get $o)))
		       (global.get $BCHAR_OFFSET))
		    (then (i32.le_u
			     (i31.get_u (ref.cast (ref i31) (local.get $o)))
			     (i32.add (global.get $BCHAR_OFFSET)
				(i32.const 255))))
		    (else (i32.const 0))))
	     (else (i32.const 0)))))

   ;; BCHAR
   (func $BCHAR (export "BCHAR")
      (param $v i32)
      (result (ref i31))
      (ref.i31 (i32.add (local.get $v) (global.get $BCHAR_OFFSET))))
	 
   ;; CCHAR
   (func $CCHAR (export "CCHAR")
      (param $o (ref i31))
      (result i32)
      (i32.sub (i31.get_u (local.get $o)) (global.get $BCHAR_OFFSET)))

   ;; toupper
   (func $toupper (export "toupper")
      (param $c i32)
      (result i32)
      (return
	 (if (result i32) (i32.ge_u (local.get $c) (i32.const 97))
	     (then
		(if (result i32) (i32.le_u (local.get $c) (i32.const 122))
		    (then (i32.sub (local.get $c) (i32.const 32)))
		    (else (local.get $c))))
	     (else
	      (local.get $c)))))

   ;; tolower
   (func $tolower (export "tolower")
      (param $c i32)
      (result i32)
      (return
	 (if (result i32) (i32.ge_u (local.get $c) (i32.const 65))
	     (then
		(if (result i32) (i32.le_u (local.get $c) (i32.const 90))
		    (then (i32.add (local.get $c) (i32.const 32)))
		    (else (local.get $c))))
	     (else
	      (local.get $c)))))
   )
