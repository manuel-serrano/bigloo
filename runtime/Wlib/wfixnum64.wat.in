;; -*- eval: (bee-mode) -*-
;*=====================================================================*/
;*    .../prgm/project/bigloo/wasm/runtime/Wlib/wfixnum64.wat.in       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Oct  2 08:37:32 2024                          */
;*    Last change :  Sun Jul  6 10:27:05 2025 (serrano)                */
;*    Copyright   :  2024-25 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    WASM boxed 64bit fixnum implementation                           */
;*=====================================================================*/

(module $__bigloo_fixnum64
   
   ;; -----------------------------------------------------------------
   ;; Data 
   ;; -----------------------------------------------------------------

   (data $div0_internal_error "division by 0")
   
   ;; -----------------------------------------------------------------
   ;; Imports
   ;; -----------------------------------------------------------------
   
   (import "__bigloo" "bgl_internal_error_set" (func $bgl_internal_error_set (param (ref eq))))
   

   ;; -----------------------------------------------------------------
   ;; Type declarations 
   ;; -----------------------------------------------------------------

   (rec
      (type $__dummy__ (struct (field $dummy (ref $bint))))
      (type $bint (struct (field $v i64))))
   (type $bints-table (array (ref $bint)))

   ;; -----------------------------------------------------------------
   ;; Global variables 
   ;; -----------------------------------------------------------------
   
   (global $BINTS (ref $bints-table) 
      @BINTS_PREALLOC@
      )
   
   (global $bint-default-value
      (export "BGL_BINT_DEFAULT_VALUE") (ref $bint)
      (struct.new $bint (i64.const 0)))

   (global $BGL_LONG_MIN
      (export "BGL_LONG_MIN") i64
      (i64.const -9223372036854775808))
   
   (global $BGL_LONG_MAX
      (export "BGL_LONG_MAX") i64
      (i64.const 9223372036854775807))

   ;; -----------------------------------------------------------------
   ;; Fixnum macros 
   ;; -----------------------------------------------------------------
   
   (func $INTEGERP (export "INTEGERP")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $bint) (local.get $o)))
  
   (func $CINT (export "CINT")
      (param $o (ref $bint))
      (result i64)
      (struct.get $bint $v (local.get $o)))

   (func $OBJ_TO_INT (export "OBJ_TO_INT")
      (param $o (ref eq))
      (result i64)
      (call $CINT (ref.cast (ref $bint) (local.get $o))))

   (global $MAXVALFX (export "MAXVALFX") i64
      (i64.const 9223372036854775807))

   (global $MAXVALFX_BITSIZE (export "MAXVALFX_BITSIZE") i32
      (i32.const 64))

   ;; -----------------------------------------------------------------
   ;; Library functions 
   ;; -----------------------------------------------------------------

   ;; BINT
   (func $BINT (export "BINT")
      (param $x i64)
      (result (ref $bint))
      (local $tmp i64)
      (local.set $tmp (i64.sub (local.get $x)
			 (i64.const @BINTS_PREALLOC_START@)))
      (if (i64.lt_u (local.get $tmp) (i64.const @BINTS_PREALLOC_SIZE@))
	  (then
	     (return
		(array.get $bints-table
		   (global.get $BINTS)
		   (i32.wrap_i64 (local.get $tmp)))))
	  (else
	   (return 
	      (struct.new $bint (local.get $x))))))

   (func $check_zero64 (export "check_zero64")
      (param $x i64)
      (result i64)
      (if (i64.eqz (local.get $x))
	  (then
	     (call $bgl_internal_error_set
		(array.new_data $bstring $div0_internal_error
		   (i32.const 0)
		   (i32.const 13)))
	     (throw $fail))
	  (else (return (local.get $x))))
      (unreachable))

   (func $check_zero32 (export "check_zero32")
      (param $x i32)
      (result i32)
      (if (i32.eqz (local.get $x))
	  (then
	     (call $bgl_internal_error_set
		(array.new_data $bstring $div0_internal_error
		   (i32.const 0)
		   (i32.const 13)))
	     (throw $fail))
	  (else (return (local.get $x))))
      (unreachable))
      
   )

