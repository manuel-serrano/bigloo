;; -*- eval: (bee-mode) -*-
;*=====================================================================*/
;*    .../prgm/project/bigloo/wasm/runtime/Wlib/wfixnum31.wat.in       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Oct  2 08:37:32 2024                          */
;*    Last change :  Mon Jun 23 05:31:15 2025 (serrano)                */
;*    Copyright   :  2024-25 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    WASM unboxed 31bit fixnum implementation                         */
;*=====================================================================*/

(module $__bigloo_fixnum31

   ;; -----------------------------------------------------------------
   ;; JavaScript imports 
   ;; -----------------------------------------------------------------
   
    (import "__js_bignum" "bignum_lsh" (func $bignum_lsh (param externref) (param f64) (result externref)))
   (import "__js_bignum" "bignum_mask" (func $bignum_rsh (param externref) (param f64) (result externref)))
   (import "__js_bignum" "bignum_mask" (func $bignum_mask (param externref) (param f64) (result externref)))
   
   ;; -----------------------------------------------------------------
   ;; Data 
   ;; -----------------------------------------------------------------

   (data $div0_internal_error "division by 0")
   
   ;; -----------------------------------------------------------------
   ;; Global variables 
   ;; -----------------------------------------------------------------
   
   (global $bint-default-value
      (export "BGL_BINT_DEFAULT_VALUE") (ref i31)
      (ref.i31 (i32.const 0)))

   (global $BGL_LONG_MIN
      (export "BGL_LONG_MIN") i64
      (i64.const -1073741824))
   (global $BGL_LONG_MAX
      (export "BGL_LONG_MAX") i64
      (i64.const 1073741823))

   ;; -----------------------------------------------------------------
   ;; Fixnum macros 
   ;; -----------------------------------------------------------------
   
   (func $INTEGERP (export "INTEGERP")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref i31) (local.get $o)))
  
   (func $CINT (export "CINT")
      (param $o (ref i31))
      (result i64)
      (i64.extend_i32_s (i31.get_s (local.get $o))))

   (func $OBJ_TO_INT (export "OBJ_TO_INT")
      (param $o (ref eq))
      (result i64)
      (call $CINT (ref.cast (ref i31) (local.get $o))))

   (global $MAXVALFX (export "MAXVALFX") i64
      (i64.const 2147483647))

   (global $MAXVALFX_BITSIZE (export "MAXVALFX_BITSIZE") i32
      (i32.const 31))

   ;; -----------------------------------------------------------------
   ;; Library functions 
   ;; -----------------------------------------------------------------

   ;; BINT
   (func $BINT (export "BINT")
      (param $x i64)
      (result (ref i31))
      (local $tmp i64)
      (ref.i31 (i32.wrap_i64 (local.get $x))))

   (func $check_zero64 (export "check_zero64")
      (param $x i64)
      (result i64)
      (if (i64.eqz (local.get $x))
	  (then
	     (call $bgl_internal_error_set
		(array.new_data $bstring $div0_internal_error
		   (i32.const 0)
		   (i32.const 13)))
	     (throw $fail))
	  (else (return (local.get $x)))))

   (func $check_zero32 (export "check_zero32")
      (param $x i32)
      (result i32)
      (if (i32.eqz (local.get $x))
	  (then
	     (call $bgl_internal_error_set
		(array.new_data $bstring $div0_internal_error
		   (i32.const 0)
		   (i32.const 13)))
	     (throw $fail))
	  (else (return (local.get $x)))))
      
   ;; bgl_bignum_lsh
   (func $bgl_bignum_lsh (export "bgl_bignum_lsh")
      (param $x (ref $bignum))
      (param $o (ref i31))
      (result (ref $bignum))
      (return
	 (struct.new $bignum
	    (call $bignum_lsh
	       (struct.get $bignum $bx (local.get $x))
	       (f64.convert_i32_s (i31.get_s (local.get $o)))))))
   
   ;; bgl_bignum_rsh
   (func $bgl_bignum_rsh (export "bgl_bignum_rsh")
      (param $x (ref $bignum))
      (param $o (ref i31))
      (result (ref $bignum))
      (return
	 (struct.new $bignum
	    (call $bignum_rsh
	       (struct.get $bignum $bx (local.get $x))
	       (f64.convert_i32_s (i31.get_s (local.get $o)))))))
   
   ;; bgl_bignum_mask
   (func $bgl_bignum_mask (export "bgl_bignum_mask")
      (param $x (ref $bignum))
      (param $o (ref i31))
      (result (ref $bignum))
      (return
	 (struct.new $bignum
	    (call $bignum_mask
	       (struct.get $bignum $bx (local.get $x))
	       (f64.convert_i32_s (i31.get_s (local.get $o)))))))
   
   )

