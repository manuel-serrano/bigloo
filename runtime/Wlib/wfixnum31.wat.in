;; -*- eval: (bee-mode) -*-
;*=====================================================================*/
;*    .../prgm/project/bigloo/wasm/runtime/Wlib/wfixnum31.wat.in       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Oct  2 08:37:32 2024                          */
;*    Last change :  Thu Jul 24 14:26:57 2025 (serrano)                */
;*    Copyright   :  2024-25 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    WASM unboxed 31bit fixnum implementation                         */
;*=====================================================================*/

(module $__bigloo_fixnum31

   ;; -----------------------------------------------------------------
   ;; Data 
   ;; -----------------------------------------------------------------

   (data $div0_internal_error "division by 0")
   (data $div "/")

   
   ;; -----------------------------------------------------------------
   ;; Imports
   ;; -----------------------------------------------------------------
   
   (import "__js" "trace" (func $js_trace (param i32)))
   
   (import "__bigloo" "the_failure" (func $the_failure (param (ref eq)) (param (ref eq)) (param (ref eq)) (result (ref eq))))
   
   ;; -----------------------------------------------------------------
   ;; Global variables 
   ;; -----------------------------------------------------------------
   
   (global $bint-default-value
      (export "BGL_BINT_DEFAULT_VALUE") (ref i31)
      (ref.i31 (i32.const 0)))

   (global $BGL_LONG_MIN
      (export "BGL_LONG_MIN") i64
      (i64.const -1073741824))
   (global $BGL_LONG_MAX
      (export "BGL_LONG_MAX") i64
      (i64.const 1073741823))

   ;; -----------------------------------------------------------------
   ;; Fixnum macros 
   ;; -----------------------------------------------------------------
   
   (func $INTEGERP (export "INTEGERP")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref i31) (local.get $o)))
  
   (func $INTEGERSP (export "INTEGERSP")
      (param $x (ref eq))
      (param $y (ref eq))
      (result i32)
      (return 
	 (if (result i32) (ref.test (ref i31) (local.get $x))
	     (then (ref.test (ref i31) (local.get $y)))
	     (else (i32.const 0)))))
  
   (func $ELONGP (export "ELONGP")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $belong) (local.get $o)))
  
   (func $LLONGP (export "LLONGP")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $bllong) (local.get $o)))
  
   (func $BGL_INT8P (export "BGL_INT8P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $bint8) (local.get $o)))
  
   (func $BGL_UINT8P (export "BGL_UINT8P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $buint8) (local.get $o)))
  
   (func $BGL_INT16P (export "BGL_INT16P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $bint16) (local.get $o)))
  
   (func $BGL_UINT16P (export "BGL_UINT16P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $buint16) (local.get $o)))
  
   (func $BGL_INT32P (export "BGL_INT32P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $bint32) (local.get $o)))
  
   (func $BGL_UINT32P (export "BGL_UINT32P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $buint32) (local.get $o)))
  
   (func $BGL_INT64P (export "BGL_INT64P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $bint64) (local.get $o)))
  
   (func $BGL_UINT64P (export "BGL_UINT64P")
      (param $o (ref eq))
      (result i32)
      (ref.test (ref $buint64) (local.get $o)))
  
   (func $CINT (export "CINT")
      (param $o (ref i31))
      (result i64)
      (i64.extend_i32_s (i31.get_s (local.get $o))))

   (func $OBJ_TO_INT (export "OBJ_TO_INT")
      (param $o (ref eq))
      (result i64)
      (call $CINT (ref.cast (ref i31) (local.get $o))))

   (func $BGL_CINT_AS_ULONG (export "BGL_CINT_AS_ULONG")
      (param $i (ref i31))
      (result i64)
      (return_call $CINT (local.get $i)))
      
   (global $MAXVALFX (export "MAXVALFX") i64
      (i64.const 2147483647))

   (global $MAXVALFX_BITSIZE (export "MAXVALFX_BITSIZE") i32
      (i32.const 31))

   ;; -----------------------------------------------------------------
   ;; Library functions 
   ;; -----------------------------------------------------------------

   ;; BINT
   (func $BINT (export "BINT")
      (param $x i64)
      (result (ref i31))
      (local $tmp i64)
      (ref.i31 (i32.wrap_i64 (local.get $x))))

   (func $check_zero64 (export "check_zero64")
      (param $x i64)
      (result i64)
      (if (i64.eqz (local.get $x))
	  (then
	     (call $the_failure
		(array.new_data $bstring $div
		   (i32.const 0)
		   (i32.const 1))
		(array.new_data $bstring $div0_internal_error
		   (i32.const 0)
		   (i32.const 13))
		(call $BINT (i64.const 0)))
	     (unreachable))
	  (else (return (local.get $x))))
      (unreachable))

   (func $check_zero32 (export "check_zero32")
      (param $x i32)
      (result i32)
      (if (i32.eqz (local.get $x))
	  (then
	     (call $the_failure
		(array.new_data $bstring $div
		   (i32.const 0)
		   (i32.const 1))
		(array.new_data $bstring $div0_internal_error
		   (i32.const 0)
		   (i32.const 13))
		(call $BINT (i64.const 0)))
	     (unreachable))
	  (else (return (local.get $x))))
      (unreachable))
      
   )

