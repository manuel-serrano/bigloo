;; -*- eval: (bee-mode) -*-
;*=====================================================================*/
;*    serrano/prgm/project/bigloo/wasm/runtime/Wlib/types.wat.in       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Sep 27 15:08:01 2024                          */
;*    Last change :  Mon Dec 30 06:51:45 2024 (serrano)                */
;*    Copyright   :  2024-25 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Bigloo type declarations                                         */
;*=====================================================================*/

(module $__bigloo_types
   
   ;; -----------------------------------------------------------------
   ;; Exceptions 
   ;; -----------------------------------------------------------------
   
   (tag $unimplemented)
   (tag $fail)
   (tag $BEXCEPTION (param (ref $bexception)))

   ;; -----------------------------------------------------------------
   ;; Misc 
   ;; -----------------------------------------------------------------

   (type $cnst-table (array (mut (ref eq))))

   (type $bgl_evmeaning_addr
      (struct
	 (field $val (mut (ref eq)))))
   
   ;; -----------------------------------------------------------------
   ;; Vectors 
   ;; -----------------------------------------------------------------
   (@include "./wvector.wat" type)
   
   (type $procedure (struct 
		       (field $entry (ref func))
		       (field $attr (mut (ref eq)))
		       (field $arity i32)
		       (field $env (ref null $vector))))
   ;;(type $tmpfun (struct (field (ref func))))

   (type $procedure-l (struct
			 (field $entry (ref func))
			 (field $env (ref null $vector))))
   (type $procedure-el (array (mut (ref eq))))
   
   ;; -----------------------------------------------------------------
   ;; String 
   ;; -----------------------------------------------------------------
   (@include "./wstring.wat" type)
   (@include "./wregexp.wat" type)
   (@include "./wmmap.wat" type)
   
   (type $opaque (struct))

   (@include "./wsymbols.wat" type)
   (@include "./wweakptr.wat" type)
   
   ;; TODO
   (type $pair-nil (struct))

   
   ;; Functions types (for closures and variadic calls)
   (type $func0 (func (param (ref $procedure)) (result (ref eq))))
   (type $func1 (func (param (ref $procedure)) (param (ref eq)) (result (ref eq))))
   (type $func2 (func (param (ref $procedure)) (param (ref eq) (ref eq)) (result (ref eq))))
   (type $func3 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func4 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func5 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func6 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func7 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func8 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func9 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func10 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func11 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func12 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func13 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func14 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func15 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func16 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func17 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func18 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func19 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func20 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))
   (type $func21 (func (param (ref $procedure)) (param (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq) (ref eq)) (result (ref eq))))

   ;; cells
   (type $cell (struct (field $val (mut (ref eq)))))
   
   ;; Pairs
   (type $pair (sub (struct
		       (field $car (mut (ref eq)))
		       (field $cdr (mut (ref eq))))))
   (type $epair (sub $pair (struct 
			      (field $car (mut (ref eq))) 
			      (field $cdr (mut (ref eq))) 
			      (field $cer (mut (ref eq))))))

   ;; fixnum and integers
   (@include "./wfixnum.wat" type)
   (@include "./wintegers.wat" type)
   
   ;; Bignums
   (@include "./wbignum.wat" type)
   
   ;; Boxed numeric types
   ;; (type $bbool (struct (field $v i8)))
   ;; (type $bchar (struct (field $v i8)))
   (type $bucs2 (struct (field $v i16) (field $__dummy i16)))
   (type $real (struct (field $v f64)))

   
   
   ;; Exception raised for unimplemented code.
   
   (type $struct (struct
		    (field $key (ref eq))
		    (field $values (ref $vector))))
   
   
   ;; Thread types
   (type $mutex (struct
		   (field $name (ref eq))
		   (field $backend (ref eq))
		   (field $state (ref eq))))
   (type $condvar (struct))
   (type $semaphore (struct))
   
   ;; Network
   (type $socket (struct))
   (type $datagram-socket (struct))
   
   (type $process (struct))
   
   (type $tvector (struct (field $descr (ref eq))))
   (type $hvector (struct))
   
   ;; -----------------------------------------------------------------
   ;; Ports 
   ;; -----------------------------------------------------------------
   (@include "./wrgc.wat" type)
   (@include "./wports.wat" type)

   (@include "./wobject.wat" type)

   (@include "./wdate.wat" type)

   (@include "./wdenv.wat" type)

   (@include "./wcustom.wat" type)
   (@include "./wforeign.wat" type)
   

   )
